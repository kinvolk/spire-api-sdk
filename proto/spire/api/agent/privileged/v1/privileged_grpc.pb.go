// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package privilegedv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PrivilegedClient is the client API for Privileged service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivilegedClient interface {
	// Fetch X.509-SVIDs for identities that match the given selectors.
	//
	// The caller must be local.
	FetchX509SVIDsBySelectors(ctx context.Context, in *FetchX509SVIDsBySelectorsRequest, opts ...grpc.CallOption) (Privileged_FetchX509SVIDsBySelectorsClient, error)
	WatchX509SVIDs(ctx context.Context, opts ...grpc.CallOption) (Privileged_WatchX509SVIDsClient, error)
}

type privilegedClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivilegedClient(cc grpc.ClientConnInterface) PrivilegedClient {
	return &privilegedClient{cc}
}

func (c *privilegedClient) FetchX509SVIDsBySelectors(ctx context.Context, in *FetchX509SVIDsBySelectorsRequest, opts ...grpc.CallOption) (Privileged_FetchX509SVIDsBySelectorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Privileged_serviceDesc.Streams[0], "/spire.api.agent.privileged.v1.Privileged/FetchX509SVIDsBySelectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &privilegedFetchX509SVIDsBySelectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Privileged_FetchX509SVIDsBySelectorsClient interface {
	Recv() (*FetchX509SVIDsBySelectorsResponse, error)
	grpc.ClientStream
}

type privilegedFetchX509SVIDsBySelectorsClient struct {
	grpc.ClientStream
}

func (x *privilegedFetchX509SVIDsBySelectorsClient) Recv() (*FetchX509SVIDsBySelectorsResponse, error) {
	m := new(FetchX509SVIDsBySelectorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *privilegedClient) WatchX509SVIDs(ctx context.Context, opts ...grpc.CallOption) (Privileged_WatchX509SVIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Privileged_serviceDesc.Streams[1], "/spire.api.agent.privileged.v1.Privileged/WatchX509SVIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &privilegedWatchX509SVIDsClient{stream}
	return x, nil
}

type Privileged_WatchX509SVIDsClient interface {
	Send(*WatchX509SVIDsRequest) error
	Recv() (*WatchX509SVIDsResponse, error)
	grpc.ClientStream
}

type privilegedWatchX509SVIDsClient struct {
	grpc.ClientStream
}

func (x *privilegedWatchX509SVIDsClient) Send(m *WatchX509SVIDsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privilegedWatchX509SVIDsClient) Recv() (*WatchX509SVIDsResponse, error) {
	m := new(WatchX509SVIDsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrivilegedServer is the server API for Privileged service.
// All implementations must embed UnimplementedPrivilegedServer
// for forward compatibility
type PrivilegedServer interface {
	// Fetch X.509-SVIDs for identities that match the given selectors.
	//
	// The caller must be local.
	FetchX509SVIDsBySelectors(*FetchX509SVIDsBySelectorsRequest, Privileged_FetchX509SVIDsBySelectorsServer) error
	WatchX509SVIDs(Privileged_WatchX509SVIDsServer) error
	mustEmbedUnimplementedPrivilegedServer()
}

// UnimplementedPrivilegedServer must be embedded to have forward compatible implementations.
type UnimplementedPrivilegedServer struct {
}

func (UnimplementedPrivilegedServer) FetchX509SVIDsBySelectors(*FetchX509SVIDsBySelectorsRequest, Privileged_FetchX509SVIDsBySelectorsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchX509SVIDsBySelectors not implemented")
}
func (UnimplementedPrivilegedServer) WatchX509SVIDs(Privileged_WatchX509SVIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchX509SVIDs not implemented")
}
func (UnimplementedPrivilegedServer) mustEmbedUnimplementedPrivilegedServer() {}

// UnsafePrivilegedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivilegedServer will
// result in compilation errors.
type UnsafePrivilegedServer interface {
	mustEmbedUnimplementedPrivilegedServer()
}

func RegisterPrivilegedServer(s grpc.ServiceRegistrar, srv PrivilegedServer) {
	s.RegisterService(&_Privileged_serviceDesc, srv)
}

func _Privileged_FetchX509SVIDsBySelectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchX509SVIDsBySelectorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrivilegedServer).FetchX509SVIDsBySelectors(m, &privilegedFetchX509SVIDsBySelectorsServer{stream})
}

type Privileged_FetchX509SVIDsBySelectorsServer interface {
	Send(*FetchX509SVIDsBySelectorsResponse) error
	grpc.ServerStream
}

type privilegedFetchX509SVIDsBySelectorsServer struct {
	grpc.ServerStream
}

func (x *privilegedFetchX509SVIDsBySelectorsServer) Send(m *FetchX509SVIDsBySelectorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Privileged_WatchX509SVIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivilegedServer).WatchX509SVIDs(&privilegedWatchX509SVIDsServer{stream})
}

type Privileged_WatchX509SVIDsServer interface {
	Send(*WatchX509SVIDsResponse) error
	Recv() (*WatchX509SVIDsRequest, error)
	grpc.ServerStream
}

type privilegedWatchX509SVIDsServer struct {
	grpc.ServerStream
}

func (x *privilegedWatchX509SVIDsServer) Send(m *WatchX509SVIDsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privilegedWatchX509SVIDsServer) Recv() (*WatchX509SVIDsRequest, error) {
	m := new(WatchX509SVIDsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Privileged_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.agent.privileged.v1.Privileged",
	HandlerType: (*PrivilegedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchX509SVIDsBySelectors",
			Handler:       _Privileged_FetchX509SVIDsBySelectors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchX509SVIDs",
			Handler:       _Privileged_WatchX509SVIDs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spire/api/agent/privileged/v1/privileged.proto",
}
