// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package delegationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DelegationClient is the client API for Delegation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelegationClient interface {
	// Fetch X.509-SVIDs for multiple workloads.
	FetchX509SVIDs(ctx context.Context, opts ...grpc.CallOption) (Delegation_FetchX509SVIDsClient, error)
	// Fetch local and federated bundles.
	FetchX509Bundles(ctx context.Context, in *FetchX509BundlesRequest, opts ...grpc.CallOption) (Delegation_FetchX509BundlesClient, error)
}

type delegationClient struct {
	cc grpc.ClientConnInterface
}

func NewDelegationClient(cc grpc.ClientConnInterface) DelegationClient {
	return &delegationClient{cc}
}

func (c *delegationClient) FetchX509SVIDs(ctx context.Context, opts ...grpc.CallOption) (Delegation_FetchX509SVIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Delegation_serviceDesc.Streams[0], "/spire.api.agent.delegation.v1.Delegation/FetchX509SVIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &delegationFetchX509SVIDsClient{stream}
	return x, nil
}

type Delegation_FetchX509SVIDsClient interface {
	Send(*FetchX509SVIDsRequest) error
	Recv() (*FetchX509SVIDsResponse, error)
	grpc.ClientStream
}

type delegationFetchX509SVIDsClient struct {
	grpc.ClientStream
}

func (x *delegationFetchX509SVIDsClient) Send(m *FetchX509SVIDsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *delegationFetchX509SVIDsClient) Recv() (*FetchX509SVIDsResponse, error) {
	m := new(FetchX509SVIDsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *delegationClient) FetchX509Bundles(ctx context.Context, in *FetchX509BundlesRequest, opts ...grpc.CallOption) (Delegation_FetchX509BundlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Delegation_serviceDesc.Streams[1], "/spire.api.agent.delegation.v1.Delegation/FetchX509Bundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &delegationFetchX509BundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Delegation_FetchX509BundlesClient interface {
	Recv() (*FetchX509BundlesResponse, error)
	grpc.ClientStream
}

type delegationFetchX509BundlesClient struct {
	grpc.ClientStream
}

func (x *delegationFetchX509BundlesClient) Recv() (*FetchX509BundlesResponse, error) {
	m := new(FetchX509BundlesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DelegationServer is the server API for Delegation service.
// All implementations must embed UnimplementedDelegationServer
// for forward compatibility
type DelegationServer interface {
	// Fetch X.509-SVIDs for multiple workloads.
	FetchX509SVIDs(Delegation_FetchX509SVIDsServer) error
	// Fetch local and federated bundles.
	FetchX509Bundles(*FetchX509BundlesRequest, Delegation_FetchX509BundlesServer) error
	mustEmbedUnimplementedDelegationServer()
}

// UnimplementedDelegationServer must be embedded to have forward compatible implementations.
type UnimplementedDelegationServer struct {
}

func (UnimplementedDelegationServer) FetchX509SVIDs(Delegation_FetchX509SVIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchX509SVIDs not implemented")
}
func (UnimplementedDelegationServer) FetchX509Bundles(*FetchX509BundlesRequest, Delegation_FetchX509BundlesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchX509Bundles not implemented")
}
func (UnimplementedDelegationServer) mustEmbedUnimplementedDelegationServer() {}

// UnsafeDelegationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelegationServer will
// result in compilation errors.
type UnsafeDelegationServer interface {
	mustEmbedUnimplementedDelegationServer()
}

func RegisterDelegationServer(s grpc.ServiceRegistrar, srv DelegationServer) {
	s.RegisterService(&_Delegation_serviceDesc, srv)
}

func _Delegation_FetchX509SVIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DelegationServer).FetchX509SVIDs(&delegationFetchX509SVIDsServer{stream})
}

type Delegation_FetchX509SVIDsServer interface {
	Send(*FetchX509SVIDsResponse) error
	Recv() (*FetchX509SVIDsRequest, error)
	grpc.ServerStream
}

type delegationFetchX509SVIDsServer struct {
	grpc.ServerStream
}

func (x *delegationFetchX509SVIDsServer) Send(m *FetchX509SVIDsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *delegationFetchX509SVIDsServer) Recv() (*FetchX509SVIDsRequest, error) {
	m := new(FetchX509SVIDsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Delegation_FetchX509Bundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchX509BundlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DelegationServer).FetchX509Bundles(m, &delegationFetchX509BundlesServer{stream})
}

type Delegation_FetchX509BundlesServer interface {
	Send(*FetchX509BundlesResponse) error
	grpc.ServerStream
}

type delegationFetchX509BundlesServer struct {
	grpc.ServerStream
}

func (x *delegationFetchX509BundlesServer) Send(m *FetchX509BundlesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Delegation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.agent.delegation.v1.Delegation",
	HandlerType: (*DelegationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchX509SVIDs",
			Handler:       _Delegation_FetchX509SVIDs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchX509Bundles",
			Handler:       _Delegation_FetchX509Bundles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spire/api/agent/delegation/v1/delegation.proto",
}
